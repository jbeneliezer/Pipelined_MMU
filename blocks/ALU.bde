SCHM0106

HEADER
{
 FREEID 33
 VARIABLES
 {
  #ARCHITECTURE="behavioral"
  #BLOCKTABLE_FILE="#HDL2DIAGRAM.bde"
  #DEFAULT_RANGE0="<range<index=\"0\"><name=\"op\"><left=\"24\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE1="<range<index=\"0\"><name=\"rd\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE2="<range<index=\"0\"><name=\"rs1\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE3="<range<index=\"0\"><name=\"rs2\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE4="<range<index=\"0\"><name=\"rs3\"><left=\"127\"><direction=\"downto\"><right=\"0\"><initial_value=\"\"><delay=\"\">>"
  #ENTITY="ALU"
  #LANGUAGE="VHDL"
  AUTHOR="Judah Ben-Eliezer"
  COMPANY="Stony Brook University"
  CREATIONDATE="11/30/2021"
  SOURCE="..\\src\\ALU.vhd"
 }
}

PAGE ""
{
 PAGEHEADER
 {
  MARGINS (200,200,200,200)
  RECT (0,0,0,0)
 }
 
 BODY
 {
  VHDLDESIGNUNITHDR  1, 0, 0
  {
   LABEL "Design Unit Header"
   TEXT 
"library simd;\n"+
"use simd.ALU_functions.all;\n"+
"use simd.data_types.all;\n"+
"library ieee;\n"+
"use ieee.std_logic_1164.all;\n"+
"use ieee.NUMERIC_STD.all;"
   RECT (220,260,620,571)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  PROCESS  2, 0, 0
  {
   LABEL "process_39"
   TEXT 
"process (Op,rs1,rs2,rs3(127 downto 96),rs3(63 downto 32),rs3(95 downto 64),rs3(31 downto 0),rs3(127 downto 112),rs3(95 downto 80),rs3(63 downto 48),rs3(31 downto 16),rs3(111 downto 96),rs3(79 downto 64),rs3(47 downto 32),rs3(15 downto 0))\n"+
"                         variable l_tmp : std_logic_vector(127 downto 0) := z128;\n"+
"                       begin\n"+
"                         case (Op) is \n"+
"                           when \"0------------------------\" => \n"+
"                              l_tmp := z128;\n"+
"                              case (op(23 downto 21)) is \n"+
"                                when \"000\" => \n"+
"                                   l_tmp(15 downto 0) := Op(20 downto 5);\n"+
"                                when \"001\" => \n"+
"                                   l_tmp(31 downto 16) := Op(20 downto 5);\n"+
"                                when \"010\" => \n"+
"                                   l_tmp(47 downto 32) := Op(20 downto 5);\n"+
"                                when \"011\" => \n"+
"                                   l_tmp(63 downto 48) := Op(20 downto 5);\n"+
"                                when \"100\" => \n"+
"                                   l_tmp(79 downto 64) := Op(20 downto 5);\n"+
"                                when \"101\" => \n"+
"                                   l_tmp(95 downto 80) := Op(20 downto 5);\n"+
"                                when \"110\" => \n"+
"                                   l_tmp(111 downto 96) := Op(20 downto 5);\n"+
"                                when \"111\" => \n"+
"                                   l_tmp(127 downto 112) := Op(20 downto 5);\n"+
"                                when others => \n"+
"                                   null;\n"+
"                              end case;\n"+
"                              Rd <= l_tmp;\n"+
"                           when \"10000--------------------\" => \n"+
"                              Rd(31 downto 0) <= MULT_ADD_I(rs3(15 downto 0),rs2(15 downto 0),rs1(31 downto 0));\n"+
"                              Rd(63 downto 32) <= MULT_ADD_I(rs3(47 downto 32),rs2(47 downto 32),rs1(63 downto 32));\n"+
"                              Rd(95 downto 64) <= MULT_ADD_I(rs3(79 downto 64),rs2(79 downto 64),rs1(95 downto 64));\n"+
"                              Rd(127 downto 96) <= MULT_ADD_I(rs3(111 downto 96),rs2(111 downto 96),rs1(127 downto 96));\n"+
"                           when \"10001--------------------\" => \n"+
"                              Rd(31 downto 0) <= MULT_ADD_I(rs3(31 downto 16),rs2(31 downto 16),rs1(31 downto 0));\n"+
"                              Rd(63 downto 32) <= MULT_ADD_I(rs3(63 downto 48),rs2(63 downto 48),rs1(63 downto 32));\n"+
"                              Rd(95 downto 64) <= MULT_ADD_I(rs3(95 downto 80),rs2(95 downto 80),rs1(95 downto 64));\n"+
"                              Rd(127 downto 96) <= MULT_ADD_I(rs3(127 downto 112),rs2(127 downto 112),rs1(127 downto 96));\n"+
"                           when \"10010--------------------\" => \n"+
"                              Rd(31 downto 0) <= MULT_SUB_I(rs3(15 downto 0),rs2(15 downto 0),rs1(31 downto 0));\n"+
"                              Rd(63 downto 32) <= MULT_SUB_I(rs3(47 downto 32),rs2(47 downto 32),rs1(63 downto 32));\n"+
"                              Rd(95 downto 64) <= MULT_SUB_I(rs3(79 downto 64),rs2(79 downto 64),rs1(95 downto 64));\n"+
"                              Rd(127 downto 96) <= MULT_SUB_I(rs3(111 downto 96),rs2(111 downto 96),rs1(127 downto 96));\n"+
"                           when \"10011--------------------\" => \n"+
"                              Rd(31 downto 0) <= MULT_SUB_I(rs3(31 downto 16),rs2(31 downto 16),rs1(31 downto 0));\n"+
"                              Rd(63 downto 32) <= MULT_SUB_I(rs3(63 downto 48),rs2(63 downto 48),rs1(63 downto 32));\n"+
"                              Rd(95 downto 64) <= MULT_SUB_I(rs3(95 downto 80),rs2(95 downto 80),rs1(95 downto 64));\n"+
"                              Rd(127 downto 96) <= MULT_SUB_I(rs3(127 downto 112),rs2(127 downto 112),rs1(127 downto 96));\n"+
"                           when \"10100--------------------\" => \n"+
"                              Rd(63 downto 0) <= MULT_ADD_L(rs3(31 downto 0),rs2(31 downto 0),rs1(63 downto 0));\n"+
"                              Rd(127 downto 64) <= MULT_ADD_L(rs3(95 downto 64),rs2(95 downto 64),rs1(127 downto 64));\n"+
"                           when \"10101--------------------\" => \n"+
"                              Rd(63 downto 0) <= MULT_ADD_L(rs3(63 downto 32),rs2(63 downto 32),rs1(63 downto 0));\n"+
"                              Rd(127 downto 64) <= MULT_ADD_L(rs3(127 downto 96),rs2(127 downto 96),rs1(127 downto 64));\n"+
"                           when \"10110--------------------\" => \n"+
"                              Rd(63 downto 0) <= MULT_SUB_L(rs3(31 downto 0),rs2(31 downto 0),rs1(63 downto 0));\n"+
"                              Rd(127 downto 64) <= MULT_SUB_L(rs3(95 downto 64),rs2(95 downto 64),rs1(127 downto 64));\n"+
"                           when \"10111--------------------\" => \n"+
"                              Rd(63 downto 0) <= MULT_SUB_L(rs3(63 downto 32),rs2(63 downto 32),rs1(63 downto 0));\n"+
"                              Rd(127 downto 64) <= MULT_SUB_L(rs3(127 downto 96),rs2(127 downto 96),rs1(127 downto 64));\n"+
"                           when \"11----0000---------------\" => \n"+
"                              Rd <= z128;\n"+
"                           when \"11----0001---------------\" => \n"+
"                              Rd(15 downto 0) <= std_logic_vector(unsigned(rs1(15 downto 0)) + unsigned(rs2(15 downto 0)));\n"+
"                              Rd(31 downto 16) <= std_logic_vector(unsigned(rs1(31 downto 16)) + unsigned(rs2(31 downto 16)));\n"+
"                              Rd(47 downto 32) <= std_logic_vector(unsigned(rs1(47 downto 32)) + unsigned(rs2(47 downto 32)));\n"+
"                              Rd(63 downto 48) <= std_logic_vector(unsigned(rs1(63 downto 48)) + unsigned(rs2(63 downto 48)));\n"+
"                              Rd(79 downto 64) <= std_logic_vector(unsigned(rs1(79 downto 64)) + unsigned(rs2(79 downto 64)));\n"+
"                              Rd(95 downto 80) <= std_logic_vector(unsigned(rs1(95 downto 80)) + unsigned(rs2(95 downto 80)));\n"+
"                              Rd(111 downto 96) <= std_logic_vector(unsigned(rs1(111 downto 96)) + unsigned(rs2(111 downto 96)));\n"+
"                              Rd(127 downto 112) <= std_logic_vector(unsigned(rs1(127 downto 112)) + unsigned(rs2(127 downto 112)));\n"+
"                           when \"11----0010---------------\" => \n"+
"                              Rd(15 downto 0) <= SAT(rs1(15),rs2(15),std_logic_vector(signed(rs1(15 downto 0)) + signed(rs2(15 downto 0))));\n"+
"                              Rd(31 downto 16) <= SAT(rs1(31),rs2(31),std_logic_vector(signed(rs1(31 downto 16)) + signed(rs2(31 downto 16))));\n"+
"                              Rd(47 downto 32) <= SAT(rs1(47),rs2(47),std_logic_vector(signed(rs1(47 downto 32)) + signed(rs2(47 downto 32))));\n"+
"                              Rd(63 downto 48) <= SAT(rs1(63),rs2(63),std_logic_vector(signed(rs1(63 downto 48)) + signed(rs2(63 downto 48))));\n"+
"                              Rd(79 downto 64) <= SAT(rs1(79),rs2(79),std_logic_vector(signed(rs1(79 downto 64)) + signed(rs2(79 downto 64))));\n"+
"                              Rd(95 downto 80) <= SAT(rs1(95),rs2(95),std_logic_vector(signed(rs1(95 downto 80)) + signed(rs2(95 downto 80))));\n"+
"                              Rd(111 downto 96) <= SAT(rs1(111),rs2(111),std_logic_vector(signed(rs1(111 downto 96)) + signed(rs2(111 downto 96))));\n"+
"                              Rd(127 downto 112) <= SAT(rs1(127),rs2(127),std_logic_vector(signed(rs1(127 downto 112)) + signed(rs2(127 downto 112))));\n"+
"                           when \"11----0011---------------\" => \n"+
"                              Rd(31 downto 0) <= rs1(31 downto 0);\n"+
"                              Rd(63 downto 32) <= rs1(31 downto 0);\n"+
"                              Rd(95 downto 64) <= rs1(31 downto 0);\n"+
"                              Rd(127 downto 96) <= rs1(31 downto 0);\n"+
"                           when \"11----0100---------------\" => \n"+
"                              Rd(15 downto 0) <= CGH(rs1(15 downto 0),rs2(15 downto 0));\n"+
"                              Rd(31 downto 16) <= CGH(rs1(31 downto 16),rs2(31 downto 16));\n"+
"                              Rd(47 downto 32) <= CGH(rs1(47 downto 32),rs2(47 downto 32));\n"+
"                              Rd(63 downto 48) <= CGH(rs1(63 downto 48),rs2(63 downto 48));\n"+
"                              Rd(79 downto 64) <= CGH(rs1(79 downto 64),rs2(79 downto 64));\n"+
"                              Rd(95 downto 80) <= CGH(rs1(95 downto 80),rs2(95 downto 80));\n"+
"                              Rd(111 downto 96) <= CGH(rs1(111 downto 96),rs2(111 downto 96));\n"+
"                              Rd(127 downto 112) <= CGH(rs1(127 downto 112),rs2(127 downto 112));\n"+
"                           when \"11----0101---------------\" => \n"+
"                              Rd(31 downto 0) <= CLZ(rs1(31 downto 0));\n"+
"                              Rd(63 downto 32) <= CLZ(rs1(63 downto 32));\n"+
"                              Rd(95 downto 64) <= CLZ(rs1(95 downto 64));\n"+
"                              Rd(127 downto 96) <= CLZ(rs1(127 downto 96));\n"+
"                           when \"11----0110---------------\" => \n"+
"                              if (signed(rs1(31 downto 0)) > signed(rs2(31 downto 0))) then\n"+
"                                 Rd(31 downto 0) <= rs1(31 downto 0);\n"+
"                              else \n"+
"                                 Rd(31 downto 0) <= rs2(31 downto 0);\n"+
"                              end if;\n"+
"                              if (signed(rs1(63 downto 32)) > signed(rs2(63 downto 32))) then\n"+
"                                 Rd(63 downto 32) <= rs1(63 downto 32);\n"+
"                              else \n"+
"                                 Rd(63 downto 32) <= rs2(63 downto 32);\n"+
"                              end if;\n"+
"                              if (signed(rs1(95 downto 64)) > signed(rs2(95 downto 64))) then\n"+
"                                 Rd(95 downto 64) <= rs1(95 downto 64);\n"+
"                              else \n"+
"                                 Rd(95 downto 64) <= rs2(95 downto 64);\n"+
"                              end if;\n"+
"                              if (signed(rs1(127 downto 96)) > signed(rs2(127 downto 96))) then\n"+
"                                 Rd(127 downto 96) <= rs1(127 downto 96);\n"+
"                              else \n"+
"                                 Rd(127 downto 96) <= rs2(127 downto 96);\n"+
"                              end if;\n"+
"                           when \"11----0111---------------\" => \n"+
"                              if (signed(rs1(31 downto 0)) < signed(rs2(31 downto 0))) then\n"+
"                                 Rd(31 downto 0) <= rs1(31 downto 0);\n"+
"                              else \n"+
"                                 Rd(31 downto 0) <= rs2(31 downto 0);\n"+
"                              end if;\n"+
"                              if (signed(rs1(63 downto 32)) < signed(rs2(63 downto 32))) then\n"+
"                                 Rd(63 downto 32) <= rs1(63 downto 32);\n"+
"                              else \n"+
"                                 Rd(63 downto 32) <= rs2(63 downto 32);\n"+
"                              end if;\n"+
"                              if (signed(rs1(95 downto 64)) < signed(rs2(95 downto 64))) then\n"+
"                                 Rd(95 downto 64) <= rs1(95 downto 64);\n"+
"                              else \n"+
"                                 Rd(95 downto 64) <= rs2(95 downto 64);\n"+
"                              end if;\n"+
"                              if (signed(rs1(127 downto 96)) < signed(rs2(127 downto 96))) then\n"+
"                                 Rd(127 downto 96) <= rs1(127 downto 96);\n"+
"                              else \n"+
"                                 Rd(127 downto 96) <= rs2(127 downto 96);\n"+
"                              end if;\n"+
"                           when \"11----1000---------------\" => \n"+
"                              Rd(31 downto 0) <= MSGN(rs1(31 downto 0),rs2(31 downto 0));\n"+
"                              Rd(63 downto 32) <= MSGN(rs1(63 downto 32),rs2(63 downto 32));\n"+
"                              Rd(95 downto 64) <= MSGN(rs1(95 downto 64),rs2(95 downto 64));\n"+
"                              Rd(127 downto 96) <= MSGN(rs1(127 downto 96),rs2(127 downto 96));\n"+
"                           when \"11----1001---------------\" => \n"+
"                              Rd(15 downto 0) <= COUNT_ONES(rs1(15 downto 0));\n"+
"                              Rd(31 downto 16) <= COUNT_ONES(rs1(31 downto 16));\n"+
"                              Rd(47 downto 32) <= COUNT_ONES(rs1(47 downto 32));\n"+
"                              Rd(63 downto 48) <= COUNT_ONES(rs1(63 downto 48));\n"+
"                              Rd(79 downto 64) <= COUNT_ONES(rs1(79 downto 64));\n"+
"                              Rd(95 downto 80) <= COUNT_ONES(rs1(95 downto 80));\n"+
"                              Rd(111 downto 96) <= COUNT_ONES(rs1(111 downto 96));\n"+
"                              Rd(127 downto 112) <= COUNT_ONES(rs1(127 downto 112));\n"+
"                           when \"11----1010---------------\" => \n"+
"                              Rd <= std_logic_vector(rotate_right(unsigned(rs1),to_integer(unsigned(rs2(6 downto 0)))));\n"+
"                           when \"11----1011---------------\" => \n"+
"                              Rd(31 downto 0) <= std_logic_vector(rotate_right(unsigned(rs1(31 downto 0)),to_integer(unsigned(rs2(4 downto 0)))));\n"+
"                              Rd(63 downto 32) <= std_logic_vector(rotate_right(unsigned(rs1(63 downto 32)),to_integer(unsigned(rs2(36 downto 32)))));\n"+
"                              Rd(95 downto 64) <= std_logic_vector(rotate_right(unsigned(rs1(95 downto 64)),to_integer(unsigned(rs2(68 downto 64)))));\n"+
"                              Rd(127 downto 96) <= std_logic_vector(rotate_right(unsigned(rs1(127 downto 96)),to_integer(unsigned(rs2(100 downto 96)))));\n"+
"                           when \"11----1100---------------\" => \n"+
"                              Rd(15 downto 0) <= std_logic_vector(shift_left(unsigned(rs1(15 downto 0)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                              Rd(31 downto 16) <= std_logic_vector(shift_left(unsigned(rs1(31 downto 16)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                              Rd(47 downto 32) <= std_logic_vector(shift_left(unsigned(rs1(47 downto 32)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                              Rd(63 downto 48) <= std_logic_vector(shift_left(unsigned(rs1(63 downto 48)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                              Rd(79 downto 64) <= std_logic_vector(shift_left(unsigned(rs1(79 downto 64)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                              Rd(95 downto 80) <= std_logic_vector(shift_left(unsigned(rs1(95 downto 80)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                              Rd(111 downto 96) <= std_logic_vector(shift_left(unsigned(rs1(111 downto 96)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                              Rd(127 downto 112) <= std_logic_vector(shift_left(unsigned(rs1(127 downto 112)),to_integer(unsigned(Op(13 downto 10)))));\n"+
"                           when \"11----1101---------------\" => \n"+
"                              Rd(15 downto 0) <= std_logic_vector(unsigned(rs2(15 downto 0)) - unsigned(rs1(15 downto 0)));\n"+
"                              Rd(31 downto 16) <= std_logic_vector(unsigned(rs2(31 downto 16)) - unsigned(rs1(31 downto 16)));\n"+
"                              Rd(47 downto 32) <= std_logic_vector(unsigned(rs2(47 downto 32)) - unsigned(rs1(47 downto 32)));\n"+
"                              Rd(63 downto 48) <= std_logic_vector(unsigned(rs2(63 downto 48)) - unsigned(rs1(63 downto 48)));\n"+
"                              Rd(79 downto 64) <= std_logic_vector(unsigned(rs2(79 downto 64)) - unsigned(rs1(79 downto 64)));\n"+
"                              Rd(95 downto 80) <= std_logic_vector(unsigned(rs2(95 downto 80)) - unsigned(rs1(95 downto 80)));\n"+
"                              Rd(111 downto 96) <= std_logic_vector(unsigned(rs2(111 downto 96)) - unsigned(rs1(111 downto 96)));\n"+
"                              Rd(127 downto 112) <= std_logic_vector(unsigned(rs2(127 downto 112)) - unsigned(rs1(127 downto 112)));\n"+
"                           when \"11----1110---------------\" => \n"+
"                              Rd(15 downto 0) <= SAT(not rs1(15),rs2(15),std_logic_vector(signed(rs2(15 downto 0)) - signed(rs1(15 downto 0))));\n"+
"                              Rd(31 downto 16) <= SAT(not rs1(31),rs2(31),std_logic_vector(signed(rs2(31 downto 16)) - signed(rs1(31 downto 16))));\n"+
"                              Rd(47 downto 32) <= SAT(not rs1(47),rs2(47),std_logic_vector(signed(rs2(47 downto 32)) - signed(rs1(47 downto 32))));\n"+
"                              Rd(63 downto 48) <= SAT(not rs1(63),rs2(63),std_logic_vector(signed(rs2(63 downto 48)) - signed(rs1(63 downto 48))));\n"+
"                              Rd(79 downto 64) <= SAT(not rs1(79),rs2(79),std_logic_vector(signed(rs2(79 downto 64)) - signed(rs1(79 downto 64))));\n"+
"                              Rd(95 downto 80) <= SAT(not rs1(95),rs2(95),std_logic_vector(signed(rs2(95 downto 80)) - signed(rs1(95 downto 80))));\n"+
"                              Rd(111 downto 96) <= SAT(not rs1(111),rs2(111),std_logic_vector(signed(rs2(111 downto 96)) - signed(rs1(111 downto 96))));\n"+
"                              Rd(127 downto 112) <= SAT(not rs1(127),rs2(127),std_logic_vector(signed(rs2(127 downto 112)) - signed(rs1(127 downto 112))));\n"+
"                           when \"11----1111---------------\" => \n"+
"                              Rd <= rs1 xor rs2;\n"+
"                           when others => \n"+
"                              Rd <= z128;\n"+
"                         end case;\n"+
"                       end process;\n"+
"                      "
   RECT (1000,240,1401,640)
   MARGINS (20,20)
   SYNTAXCOLORED
   SHOWTEXT
   CORNER 10
   VTX (  19, 22, 24, 27, 30 )
   VARIABLES
   {
    #UPDATE_SENS_LIST="0"
   }
   LIST (  22, 24, 27, 30 )
  }
  INSTANCE  3, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="Op(24:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,380)
   VERTEXES ( (2,21) )
  }
  INSTANCE  4, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="rs1(127:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,260)
   VERTEXES ( (2,25) )
  }
  INSTANCE  5, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="rs2(127:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,300)
   VERTEXES ( (2,28) )
  }
  INSTANCE  6, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusInput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="rs3(127:0)"
    #SYMBOL="BusInput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (860,340)
   VERTEXES ( (2,31) )
  }
  INSTANCE  7, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="BusOutput"
    #CUSTOM_NAME=""
    #LIBRARY="#terminals"
    #REFERENCE="Rd(127:0)"
    #SYMBOL="BusOutput"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER=""
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
   COORD (1500,260)
   VERTEXES ( (2,18) )
  }
  TEXT  8, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,380,809,380)
   ALIGN 6
   PARENT 3
  }
  TEXT  9, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,260,809,260)
   ALIGN 6
   PARENT 4
  }
  TEXT  10, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,300,809,300)
   ALIGN 6
   PARENT 5
  }
  TEXT  11, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (809,340,809,340)
   ALIGN 6
   PARENT 6
  }
  TEXT  12, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (1551,260,1551,260)
   ALIGN 4
   PARENT 7
  }
  NET BUS  13, 0, 0
  {
   VARIABLES
   {
    #NAME="Op(24:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  14, 0, 0
  {
   VARIABLES
   {
    #NAME="Rd(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  15, 0, 0
  {
   VARIABLES
   {
    #NAME="rs1(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  16, 0, 0
  {
   VARIABLES
   {
    #NAME="rs2(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  NET BUS  17, 0, 0
  {
   VARIABLES
   {
    #NAME="rs3(127:0)"
    #VHDL_TYPE="STD_LOGIC_VECTOR"
   }
  }
  VTX  18, 0, 0
  {
   COORD (1500,260)
  }
  VTX  19, 0, 0
  {
   COORD (1401,260)
  }
  BUS  20, 0, 0
  {
   NET 14
   VTX 18, 19
  }
  VTX  21, 0, 0
  {
   COORD (860,380)
  }
  VTX  22, 0, 0
  {
   COORD (1000,380)
  }
  BUS  23, 0, 0
  {
   NET 13
   VTX 21, 22
  }
  VTX  24, 0, 0
  {
   COORD (1000,260)
  }
  VTX  25, 0, 0
  {
   COORD (860,260)
  }
  BUS  26, 0, 0
  {
   NET 15
   VTX 24, 25
  }
  VTX  27, 0, 0
  {
   COORD (1000,300)
  }
  VTX  28, 0, 0
  {
   COORD (860,300)
  }
  BUS  29, 0, 0
  {
   NET 16
   VTX 27, 28
  }
  VTX  30, 0, 0
  {
   COORD (1000,340)
  }
  VTX  31, 0, 0
  {
   COORD (860,340)
  }
  BUS  32, 0, 0
  {
   NET 17
   VTX 30, 31
  }
 }
 
}

