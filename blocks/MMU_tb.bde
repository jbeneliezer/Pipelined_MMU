SCHM0106

HEADER
{
 FREEID 60
 VARIABLES
 {
  #ARCHITECTURE="bench"
  #BLOCKTABLE_FILE="#HDL2DIAGRAM.bde"
  #DEFAULT_RANGE0="<range<index=\"0\"><name=\"input\"><left=\"0\"><direction=\"to\"><right=\"63\"><initial_value=\"\"><delay=\"\">>"
  #DEFAULT_RANGE1="<range<index=\"0\"><name=\"outputs\"><left=\"0\"><direction=\"to\"><right=\"63\"><initial_value=\"\"><delay=\"\">>"
  #ENTITY="MMU_tb"
  #LANGUAGE="VHDL"
  AUTHOR="Judah Ben-Eliezer"
  COMPANY="Stony Brook University"
  CREATIONDATE="11/30/2021"
  SOURCE="..\\src\\MMU_tb.vhd"
 }
 SYMBOL "simd" "MMU" "MMU"
 {
  HEADER
  {
   VARIABLES
   {
    #CUSTOM_NAME=""
    #DESCRIPTION=""
    #HDL_ENTRIES=
"library IEEE,WORK;\n"+
"use ieee.std_logic_1164.all,work.data_types.all;"
    #LANGUAGE="VHDL"
    #MODIFIED="1638224104"
    #NAME="MMU"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER="c7513770-47ec-4dae-947f-abfa98c85a9f"
   }
  }
  PAGE "" 
  {
   PAGEHEADER
   {
    RECT (0,0,160,160)
    FREEID 10
   }
   
   BODY
   {
    RECT  1, -1, 0
    {
     VARIABLES
     {
      #OUTLINE_FILLING="1"
     }
     AREA (20,0,140,160)
    }
    TEXT  3, 0, 0
    {
     TEXT "$#NAME"
     RECT (25,28,50,52)
     ALIGN 4
     MARGINS (1,1)
     PARENT 2
    }
    TEXT  5, 0, 0
    {
     TEXT "$#NAME"
     RECT (25,68,48,92)
     ALIGN 4
     MARGINS (1,1)
     PARENT 4
    }
    TEXT  7, 0, 0
    {
     TEXT "$#NAME"
     RECT (25,108,67,132)
     ALIGN 4
     MARGINS (1,1)
     PARENT 6
    }
    TEXT  9, 0, 0
    {
     TEXT "$#NAME"
     RECT (81,28,135,52)
     ALIGN 4
     MARGINS (1,1)
     PARENT 8
    }
    PIN  2, 0, 0
    {
     COORD (0,40)
     VARIABLES
     {
      #DIRECTION="IN"
      #LENGTH="20"
      #NAME="clk"
      #SIDE="left"
      #VHDL_TYPE="STD_LOGIC"
     }
     LINE  1, 0, 0
     {
      POINTS ( (0,0), (20,0) )
     }
    }
    PIN  4, 0, 0
    {
     COORD (0,80)
     VARIABLES
     {
      #DIRECTION="IN"
      #LENGTH="20"
      #NAME="rst"
      #SIDE="left"
      #VHDL_TYPE="STD_LOGIC"
     }
     LINE  1, 0, 0
     {
      POINTS ( (0,0), (20,0) )
     }
    }
    PIN  6, 0, 0
    {
     COORD (0,120)
     VARIABLES
     {
      #DECLARATION="(0:63)"
      #DIRECTION="IN"
      #LENGTH="20"
      #MDA_BASE_TYPE="STD_LOGIC_VECTOR"
      #MDA_KIND="UNCONSTR"
      #MDA_RECORD_TOKEN="MDA"
      #NAME="input"
      #SIDE="left"
      #VHDL_TYPE="vec_array"
     }
     LINE  1, 0, 0
     {
      POINTS ( (0,0), (20,0) )
     }
    }
    PIN  8, 0, 0
    {
     COORD (160,40)
     VARIABLES
     {
      #DIRECTION="OUT"
      #LENGTH="20"
      #MDA_RECORD_TOKEN="RECORD"
      #NAME="output"
      #SIDE="right"
      #VHDL_TYPE="RESULT"
     }
     LINE  1, 0, 0
     {
      POINTS ( (0,0), (-20,0) )
     }
    }
   }
  }
 }
}

PAGE ""
{
 PAGEHEADER
 {
  PAGESIZE (2121,1720)
  MARGINS (200,200,200,200)
  RECT (0,0,0,0)
 }
 
 BODY
 {
  VHDLDESIGNUNITHDR  1, 0, 0
  {
   LABEL "Design Unit Header"
   TEXT 
"library simd;\n"+
"use simd.data_types.all;\n"+
"use std.TEXTIO.all;\n"+
"use std.ENV.FINISH;\n"+
"library ieee;\n"+
"use ieee.std_logic_1164.all;\n"+
"use ieee.NUMERIC_STD.all;"
   RECT (220,260,620,604)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  ARCHITECTUREDECLARATIONS  2, 0, 0
  {
   LABEL "Architecture Declaration"
   TEXT 
"constant program_size : integer := 64;\n"+
""
   RECT (220,604,620,783)
   MARGINS (20,20)
   MULTILINE
   SYNTAXCOLORED
   SHOWLABEL
   SHOWTEXT
   CORNER 10
  }
  PROCESS  3, 0, 0
  {
   LABEL "clock"
   TEXT 
"clock : process\n"+
"                       begin\n"+
"                         rst <= '1';\n"+
"                         wait for 10 ns;\n"+
"                         rst <= '0';\n"+
"                         wait for 10 ns;\n"+
"                         for i in 0 to program_size - 1 loop\n"+
"                             clk <= '1';\n"+
"                             if (i < 64) then\n"+
"                                outputs(i) <= output;\n"+
"                             end if;\n"+
"                             wait for 5 ns;\n"+
"                             clk <= '0';\n"+
"                             wait for 5 ns;\n"+
"                         end loop;\n"+
"                         rst <= '1';\n"+
"                         wait;\n"+
"                       end process;\n"+
"                      "
   RECT (760,240,1161,640)
   MARGINS (20,20)
   SYNTAXCOLORED
   SHOWTEXT
   CORNER 10
   VTX (  20, 34, 38, 47 )
   VARIABLES
   {
    #UPDATE_SENS_LIST="0"
   }
  }
  INSTANCE  4, 0, 0
  {
   VARIABLES
   {
    #COMPONENT="MMU"
    #CUSTOM_NAME=""
    #LIBRARY="simd"
    #REFERENCE="uut"
    #SYMBOL="MMU"
    #SYMBOL_GLOBALLY_UNIQUE_IDENTIFIER="c7513770-47ec-4dae-947f-abfa98c85a9f"
   }
   COORD (1300,300)
   VERTEXES ( (8,15), (2,19), (6,26), (4,41) )
  }
  PROCESS  5, 0, 0
  {
   LABEL "read_file"
   TEXT 
"read_file : process\n"+
"                         file file_in : text open read_mode is \"stimulus.txt\";\n"+
"                         variable row : line;\n"+
"                         variable test_input : vec_array(0 to 63)(24 downto 0);\n"+
"                         variable i : integer := 0;\n"+
"                       begin\n"+
"                         while not endfile(file_in) and i < 64 loop\n"+
"                             READLINE(file_in,row);\n"+
"                             READ(row,test_input(i));\n"+
"                             i := i + 1;\n"+
"                         end loop;\n"+
"                         FILE_CLOSE(file_in);\n"+
"                         input <= test_input;\n"+
"                         wait;\n"+
"                       end process;\n"+
"                      "
   RECT (760,700,1161,1100)
   MARGINS (20,20)
   SYNTAXCOLORED
   SHOWTEXT
   CORNER 10
   VTX (  22 )
   VARIABLES
   {
    #UPDATE_SENS_LIST="0"
   }
  }
  PROCESS  6, 0, 0
  {
   LABEL "write_file"
   TEXT 
"write_file : process\n"+
"                         file file_out : text open write_mode is \"results.txt\";\n"+
"                         variable row : line;\n"+
"                       begin\n"+
"                         wait until rst = '0';\n"+
"                         wait until rst = '1';\n"+
"                         WRITE(row,\"PC \",left,3);\n"+
"                         WRITE(row,\"instr0 \",left,8);\n"+
"                         WRITE(row,\"instr1 \",left,8);\n"+
"                         WRITE(row,\"instr2 \",left,8);\n"+
"                         WRITE(row,\"e \",left,2);\n"+
"                         WRITE(row,\"i \",left,2);\n"+
"                         WRITE(row,\"wa \",left,3);\n"+
"                         WRITE(row,\"write_data \",left,33);\n"+
"                         WRITELINE(file_out,row);\n"+
"                         WRITELINE(file_out,row);\n"+
"                         for i in 0 to 63 loop\n"+
"                             HWRITE(row,outputs(i).PC,left,2);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).instr0,left,7);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).instr1,left,7);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).instr2,left,7);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             WRITE(row,outputs(i).write_en,left,1);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             WRITE(row,outputs(i).li,left,1);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).write_addr,left,2);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).write_data,left,32);\n"+
"                             WRITELINE(file_out,row);\n"+
"                             WRITE(row,\" \",left,4);\n"+
"                             WRITE(row,\"rf_out \",right,7);\n"+
"                             HWRITE(row,outputs(i).rf_out(0),left,32);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).rf_out(1),left,32);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).rf_out(2),left,32);\n"+
"                             WRITELINE(file_out,row);\n"+
"                             WRITE(row,\" \",left,4);\n"+
"                             WRITE(row,\"fu_in \",right,7);\n"+
"                             HWRITE(row,outputs(i).fu_in(0),left,32);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).fu_in(1),left,32);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).fu_in(2),left,32);\n"+
"                             WRITELINE(file_out,row);\n"+
"                             WRITE(row,\" \",left,4);\n"+
"                             WRITE(row,\"alu_in \",right,7);\n"+
"                             HWRITE(row,outputs(i).alu_in(0),left,32);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).alu_in(1),left,32);\n"+
"                             WRITE(row,\" \",left,1);\n"+
"                             HWRITE(row,outputs(i).alu_in(2),left,32);\n"+
"                             WRITELINE(file_out,row);\n"+
"                             WRITE(row,\" \",left,3);\n"+
"                             WRITE(row,\"alu_out \",right,8);\n"+
"                             HWRITE(row,outputs(i).alu_out,left,32);\n"+
"                             WRITELINE(file_out,row);\n"+
"                             WRITELINE(file_out,row);\n"+
"                         end loop;\n"+
"                         FILE_CLOSE(file_out);\n"+
"                         wait for 10 ns;\n"+
"                         FINISH;\n"+
"                       end process;\n"+
"                      "
   RECT (1300,480,1701,880)
   MARGINS (20,20)
   SYNTAXCOLORED
   SHOWTEXT
   CORNER 10
   VTX (  30, 44 )
   VARIABLES
   {
    #UPDATE_SENS_LIST="0"
   }
  }
  TEXT  7, 0, 0
  {
   TEXT "$#REFERENCE"
   RECT (1300,300,1300,300)
   ALIGN 8
   PARENT 4
  }
  TEXT  8, 0, 0
  {
   TEXT "$#COMPONENT"
   RECT (1300,460,1300,460)
   PARENT 4
  }
  NET WIRE  9, 0, 0
  {
   VARIABLES
   {
    #NAME="clk"
    #VHDL_TYPE="STD_LOGIC"
   }
  }
  NET MDARRAY  10, 0, 0
  {
   VARIABLES
   {
    #DECLARATION="(0:63)"
    #MDA_BASE_TYPE="STD_LOGIC_VECTOR"
    #MDA_KIND="UNCONSTR"
    #MDA_RECORD_TOKEN="MDA"
    #NAME="input"
    #VHDL_TYPE="vec_array"
   }
  }
  NET RECORD  11, 0, 0
  {
   VARIABLES
   {
    #MDA_RECORD_TOKEN="RECORD"
    #NAME="output"
    #VHDL_TYPE="result"
   }
  }
  NET MDARRAY  12, 0, 0
  {
   VARIABLES
   {
    #DECLARATION="(0:63)"
    #MDA_BASE_TYPE="result"
    #MDA_KIND="UNCONSTR"
    #MDA_RECORD_TOKEN="MDA"
    #NAME="outputs"
    #VHDL_TYPE="results"
   }
  }
  NET MDARRAY  13, 0, 0
  {
   VARIABLES
   {
    #DECLARATION="(0:63)"
    #MDA_BASE_TYPE="result"
    #MDA_KIND="UNCONSTR"
    #MDA_RECORD_TOKEN="MDA"
    #NAME="outputs"
    #VHDL_TYPE="results"
   }
  }
  NET WIRE  14, 0, 0
  {
   VARIABLES
   {
    #NAME="rst"
    #VHDL_TYPE="STD_LOGIC"
   }
  }
  VTX  15, 0, 0
  {
   COORD (1460,340)
  }
  VTX  16, 0, 0
  {
   COORD (1780,340)
  }
  RECORD  17, 0, 0
  {
   NET 11
   VTX 15, 16
  }
  TEXT  18, 0, 1
  {
   TEXT "$#NAME"
   RECT (1620,340,1620,340)
   ALIGN 9
   PARENT 17
  }
  VTX  19, 0, 0
  {
   COORD (1300,340)
  }
  VTX  20, 0, 0
  {
   COORD (1161,340)
  }
  WIRE  21, 0, 0
  {
   NET 9
   VTX 19, 20
  }
  VTX  22, 0, 0
  {
   COORD (1161,720)
  }
  VTX  23, 0, 0
  {
   COORD (1240,720)
  }
  MDARRAY  24, 0, 0
  {
   NET 10
   VTX 22, 23
  }
  TEXT  25, 0, 1
  {
   TEXT "$#NAME"
   RECT (1200,720,1200,720)
   ALIGN 9
   PARENT 24
  }
  VTX  26, 0, 0
  {
   COORD (1300,420)
  }
  VTX  27, 0, 0
  {
   COORD (1240,420)
  }
  MDARRAY  28, 0, 0
  {
   NET 10
   VTX 26, 27
  }
  TEXT  29, 0, 1
  {
   TEXT "$#NAME"
   RECT (1270,420,1270,420)
   ALIGN 9
   PARENT 28
  }
  VTX  30, 0, 0
  {
   COORD (1300,540)
  }
  VTX  31, 0, 0
  {
   COORD (1260,540)
  }
  MDARRAY  32, 0, 0
  {
   NET 12
   VTX 30, 31
  }
  TEXT  33, 0, 1
  {
   TEXT "$#NAME"
   RECT (1280,540,1280,540)
   ALIGN 9
   PARENT 32
  }
  VTX  34, 0, 0
  {
   COORD (1161,300)
  }
  VTX  35, 0, 0
  {
   COORD (1260,300)
  }
  MDARRAY  36, 0, 0
  {
   NET 13
   VTX 34, 35
  }
  TEXT  37, 0, 1
  {
   TEXT "$#NAME"
   RECT (1210,300,1210,300)
   ALIGN 9
   PARENT 36
  }
  VTX  38, 0, 0
  {
   COORD (1161,260)
  }
  VTX  39, 0, 0
  {
   COORD (1280,260)
  }
  WIRE  40, 0, 0
  {
   NET 14
   VTX 38, 39
  }
  VTX  41, 0, 0
  {
   COORD (1300,380)
  }
  VTX  42, 0, 0
  {
   COORD (1280,380)
  }
  WIRE  43, 0, 0
  {
   NET 14
   VTX 41, 42
  }
  VTX  44, 0, 0
  {
   COORD (1300,500)
  }
  VTX  45, 0, 0
  {
   COORD (1280,500)
  }
  WIRE  46, 0, 0
  {
   NET 14
   VTX 44, 45
  }
  VTX  47, 0, 0
  {
   COORD (760,260)
  }
  VTX  48, 0, 0
  {
   COORD (740,260)
  }
  RECORD  49, 0, 0
  {
   NET 11
   VTX 47, 48
  }
  TEXT  50, 0, 1
  {
   TEXT "$#NAME"
   RECT (750,260,750,260)
   ALIGN 9
   PARENT 49
  }
  VTX  51, 0, 0
  {
   COORD (1780,220)
  }
  VTX  52, 0, 0
  {
   COORD (740,220)
  }
  RECORD  53, 0, 0
  {
   NET 11
   VTX 51, 52
  }
  MDARRAY  54, 0, 0
  {
   NET 10
   VTX 27, 23
  }
  RECORD  55, 0, 0
  {
   NET 11
   VTX 51, 16
  }
  RECORD  56, 0, 0
  {
   NET 11
   VTX 52, 48
  }
  MDARRAY  57, 0, 0
  {
   NET 12
   VTX 35, 31
  }
  WIRE  58, 0, 0
  {
   NET 14
   VTX 39, 42
  }
  WIRE  59, 0, 0
  {
   NET 14
   VTX 42, 45
  }
 }
 
}

